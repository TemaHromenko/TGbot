import asyncio
from email import header
import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

import DB
import keyboard
import request
import time
import datetime


TOKEN = '5717932005:AAFoSsgn4L3SsbdFp27tRvOoImx56chtFDY'
loop = asyncio.get_event_loop()
bot = Bot(TOKEN, parse_mode='html')
storage = MemoryStorage()  
dp = Dispatcher(bot, loop=loop, storage=storage)


@dp.message_handler(commands=['start'], state=None)
async def start_mes(message:types.Message):
    uid = message.from_user.id
    await bot.send_message(uid,f"–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b>, —è –ë–æ—Ç-–∑–∞–º–µ—Ç–∫–∞")
    await message.answer("<b>–í–Ω–∏–º–∞–Ω–∏–µ, –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>.\n–≠—Ç–æ—Ç –±–æ—Ç –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–¢–µ–º–∞ –∑–∞–º–µ—Ç–∫–∏ - 25 —Å–∏–º–≤–æ–ª–æ–≤. –î–ª–∏–Ω–∞ –∑–∞–º–µ—Ç–∫–∏ - 100 —Å–∏–º–≤–æ–ª–æ–≤")
    time.sleep(2)
    await bot.send_message(uid,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å",reply_markup=keyboard.menu)


@dp.message_handler(content_types=['text'])
async def text_button(message:types.Message, state: FSMContext):
    if message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–º–µ—Ç–∫–∏ ", reply_markup=keyboard.cancel)
        await request.Request_reg.header.set()
    elif message.text == 'ü§ö–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏':
        text = DB.show_notes(message.from_user.id)
        if DB.count_list(message.from_user.id) != 0:
            await message.answer(text, parse_mode='html')
        else:
            await message.answer("–£ –í–∞—Å –Ω–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏")
    elif message.text.startswith('/del'):
        row_id = int(message.text[4:])
        uid = message.from_user.id
        try:
            DB.del_note(uid,row_id)
            await message.answer("–£–¥–∞–ª–∏–ª")
            text = DB.show_notes(message.from_user.id)
            await message.answer(text, parse_mode='html')
        except:
            await message.answer("–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏")


@dp.message_handler(state=request.Request_reg.header)
async def write_header(message:types.Message, state:FSMContext):
    if message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–∞')
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å",reply_markup=keyboard.menu)
    else:
        if len(message.text) <= 25:
            await state.update_data(header=message.text)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏',reply_markup=keyboard.cancel)
            await request.Request_reg.text.set()
        else:
            await message.answer('–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏!',reply_markup=keyboard.cancel)



@dp.message_handler(state=request.Request_reg.text)
async def write_text(message:types.Message, state:FSMContext):
    if message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–∞')
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å",reply_markup=keyboard.menu)
    else:
        if len(message.text) <= 75:
            await state.update_data(text=message.text)
            await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?", reply_markup=keyboard.save)
            await request.Request_reg.comfer.set()
        else:
            await message.answer('–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏!', reply_markup=keyboard.cancel)
        

@dp.message_handler(state=request.Request_reg.comfer)
async def confirm_saving(message:types.Message, state:FSMContext):
    if message.text == '‚úÖ–î–∞':
        data = await state.get_data()
        text = data.get('text')
        header = data.get('header')
        current_time = datetime.datetime.now()
        DB.add_note(header=header, text=text, user_id=message.from_user.id, time_write=current_time)
        await state.finish()
        await message.answer('–ó–∞–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å",reply_markup=keyboard.menu)
    elif message.text == '‚ùå–ù–µ—Ç':
        await state.finish()
        await message.answer('–í—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∑–∞–ø–∏—Å–∫—É')
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å",reply_markup=keyboard.menu)



if __name__== '__main__':
    print('-'*30)
    DB.create_db()
    executor.start_polling(dp,skip_updates=True)
    


